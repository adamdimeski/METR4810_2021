
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000169  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000aa9  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007c5  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025a  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e2  000000e2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000003e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  6c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  70:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  7c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  80:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  84:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000a4 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	96 e0       	ldi	r25, 0x06	; 6
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x6>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x10>
  b4:	00 00       	nop

void main()
{
	_delay_ms(2000);
	//FOR TIMER1
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  b6:	8f b5       	in	r24, 0x2f	; 47
  b8:	82 6a       	ori	r24, 0xA2	; 162
  ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	8b 61       	ori	r24, 0x1B	; 27
  c0:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 312;  //fPWM=50Hz
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	97 bd       	out	0x27, r25	; 39
  c8:	86 bd       	out	0x26, r24	; 38
	DDRB |= 1<<DDB5;   //PWM Pins as Output
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	87 bb       	out	0x17, r24	; 23
	
	
	OCR1A = 33;
  d0:	81 e2       	ldi	r24, 0x21	; 33
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
	while(1)
	{
		if (PIND2)
		{
			OCR1A = 20;
  d8:	84 e1       	ldi	r24, 0x14	; 20
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9b bd       	out	0x2b, r25	; 43
  de:	8a bd       	out	0x2a, r24	; 42
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <main+0x34>
