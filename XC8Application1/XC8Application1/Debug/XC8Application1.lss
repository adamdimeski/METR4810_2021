
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ad4  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000007f1  00000000  00000000  00000c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000260  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000042  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000a4 <main>:
#include <stdio.h>
#include <avr/delay.h>

void main()
{
	DDRD |= 1 << DDRD4;
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << DDRD2);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e7       	ldi	r18, 0x7F	; 127
  b2:	8a e1       	ldi	r24, 0x1A	; 26
  b4:	96 e0       	ldi	r25, 0x06	; 6
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x12>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1c>
  c0:	00 00       	nop
	_delay_ms(2000);
	
	while(1)
	{
		//Checks pin d4 for power cycling, if so, turns of thrust and power cycles for 2 seconds
		if ( (PIND & (1 << PIND2)) == (1 << PIND2) )
  c2:	82 9b       	sbis	0x10, 2	; 16
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x1e>
		{
			PORTD |= (1 << DDRD4);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	2f e7       	ldi	r18, 0x7F	; 127
  ce:	8a e1       	ldi	r24, 0x1A	; 26
  d0:	96 e0       	ldi	r25, 0x06	; 6
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x2e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x38>
  dc:	00 00       	nop
			_delay_ms(2000);
			PORTD &= ~(1 << DDRD4);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	ee cf       	rjmp	.-36     	; 0xc2 <main+0x1e>
